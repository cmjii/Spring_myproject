package com.myproject.www.security;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

import com.myproject.www.service.MemberService;

public class LoginSuccessHandler implements AuthenticationSuccessHandler {

	@Getter
	@Setter
	private String authEmail;
	
	@Getter
	@Setter
	private String authUrl; //성공하고 나서 가는 경로
	
	//redirect 객체 : 해당 정보를 가지고 리다이렉트 하는 역할
	private RedirectStrategy rdstg = new DefaultRedirectStrategy();
	//실제 로그인 정보, 경로 등을 저장
	private RequestCache reqCache = new HttpSessionRequestCache();
	
	@Inject
	private MemberService msv;
	
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		// Authentication : 인증된 AuthMember의 객체
		setAuthEmail(authentication.getName());
		setAuthUrl("/");
		
		boolean isok = msv.updateLastLogin(getAuthEmail());
		
		//내부에서 로그인 세션 저장
		HttpSession ses = request.getSession();
		log.info("loginSuccess >> ses >> " + ses.toString());
		
		if(!isok||ses == null) {
			return;
		}else {
			//시큐리티에서 로그인을 시도하면 시도한 로그인 기록이 남게 됨. == WebAttributes.AUTHENTICATION_EXCEPTION
			//이전에 시도한 시큐리티 인증 실패 기록 삭제 (다음에 로그인 할 때 실패기록이 남아있으면 누적이 됨 초기화 시켜줘야함)
			ses.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
		}
		SavedRequest saveReq =  reqCache.getRequest(request, response);
		rdstg.sendRedirect(request, response,( saveReq != null ? saveReq.getRedirectUrl() : getAuthUrl()));
	}


}
