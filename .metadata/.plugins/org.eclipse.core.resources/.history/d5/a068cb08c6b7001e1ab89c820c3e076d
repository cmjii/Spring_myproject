package com.myproject.www.controller;

import java.security.Principal;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myproject.www.handler.FileHandler;
import com.myproject.www.handler.PagingHandler;
import com.myproject.www.security.MemberVO;
import com.myproject.www.service.BoardService;
import com.myproject.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.experimental.PackagePrivate;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequiredArgsConstructor
@RequestMapping("/member/*")
public class MemberController {
	
	private final MemberService msv;
	
	private final BCryptPasswordEncoder bcryptEncode;
	
	private void logout (HttpServletRequest req, HttpServletResponse res) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		new SecurityContextLogoutHandler().logout(req, res, auth);
	}
	
	@GetMapping("/register")
	public void register() {}
	
	@PostMapping("/register")
	public String register(MemberVO mvo, RedirectAttributes re) {
		log.info("mvo >>>>>>>>>>>>>> "+ mvo);
		String encpass = bcryptEncode.encode(mvo.getPwd());
		mvo.setPwd(encpass);
		int isok = msv.insert(mvo);
		return "index";
	}
	

	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String login(HttpServletRequest request, RedirectAttributes re) {
		//로그인 실패 시 넘어오는 메서드 (다시 로그인 페이지로 돌아와 오류 메시지 전송)
		//다시 로그인 하라고 유도
		re.addAttribute("email",request.getAttribute("email"));
		re.addAttribute("errMsg",request.getAttribute("errMsg"));
		return "redirect:/member/login";
		
	}
	
	
	@GetMapping("/list")
	public void list(Model m) {
		m.addAttribute("list", msv.list());
	}
	
	@GetMapping("/modify")
	public void modify(Principal p, Model m) {
		log.info("getName : >>>>>>>>>>>>>>>>>>>>" + p.getName());
		String email = p.getName();
		m.addAttribute("mvo", msv.detail(email));
	}
	
	@PostMapping("/modify")
	public String modify(MemberVO mvo, HttpServletRequest request, HttpServletResponse respones, RedirectAttributes re) {
		int isok =0;
		if(mvo.getPwd().isEmpty()) {
			//비밀번호 없는 업데이트
			isok = msv.update(mvo);
		}else {
			mvo.setPwd(bcryptEncode.encode(mvo.getPwd()));
			isok = msv.passupdate(mvo);
		}
		
		logout(request, respones);
		
		re.addFlashAttribute("modifyOK", "1");
		
		return "redirect:/member/login";
	}
	
	@GetMapping("/remove")
	public String remove(Principal p, HttpServletRequest req, HttpServletResponse res, RedirectAttributes re) {
		String email = p.getName();
		msv.delete(email);
		logout(req,res);
		re.addFlashAttribute("logout", "1");
		return "redirect:/member/login";
		
	}
	
	@GetMapping(value="/email", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> email(Principal p){
		String email = p.getName();
		return new ResponseEntity<String>(email, HttpStatus.OK);
	}
	
	@GetMapping(value="/{inemail}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> getemail(@PathVariable("inemail") String email){
		String Email  = msv.selectEmail(email);
		return isok>0? new ResponseEntity<String>("1", HttpStatus.OK)
	}
	
}
